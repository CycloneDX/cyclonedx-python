[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"



[tool.poetry]
# keep in sync with `cyclonedx_py/_internal/utils/cdx.py`
name = "cyclonedx-bom"
version = "4.1.3"
description = "CycloneDX Software Bill of Materials (SBOM) generator for Python projects and environments"
authors = [
  "Jan Kowalleck <jan.kowalleck@gmail.com>",
]
maintainers = [
  "Jan Kowalleck <jan.kowalleck@gmail.com>",
]
license = "Apache-2.0"
readme = "README.md"
homepage = "https://github.com/CycloneDX/cyclonedx-python/#readme"
repository = "https://github.com/CycloneDX/cyclonedx-python/"
documentation = "https://cyclonedx-bom-tool.readthedocs.io/"
packages = [
  { include = "cyclonedx_py" }
]
include = [
  # all is an object -> prevent parse issue with dependabot
  { path="README.md", format =["sdist"] },
  { path="tests", format=["sdist"] },
  { path="CHANGELOG.md", format=["sdist"] },
  { path="docs", format=["sdist"] },
]
exclude = [
  # exclude dotfiles and dotfolders
  "**/.*",
  "docs/_build", "docs/processes",
]
keywords = [
  "OWASP", "CycloneDX",
  "bill-of-materials", "BOM", "software-bill-of-materials","SBOM",
  "environment", "virtualenv", "venv", "Poetry", "Pipenv", "requirements", "PDM", "Conda",
  "SPDX", "licenses", "PURL", "package-url", "dependency-graph",
]
classifiers = [
  # Trove classifiers - https://packaging.python.org/specifications/core-metadata/#metadata-classifier
  # Full list: https://pypi.python.org/pypi?%3Aaction=list_classifiers
  "Development Status :: 5 - Production/Stable",
  "Intended Audience :: Developers",
  "Intended Audience :: Information Technology",
  "Intended Audience :: Legal Industry",
  "Intended Audience :: System Administrators",
  "Topic :: Security",
  "Topic :: Software Development",
  "Topic :: System :: Software Distribution",
  "License :: OSI Approved :: Apache Software License",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Typing :: Typed"
]
[tool.poetry.urls]
"Bug Tracker" = "https://github.com/CycloneDX/cyclonedx-python/issues"
"Funding" = "https://owasp.org/donate/?reponame=www-project-cyclonedx&title=OWASP+CycloneDX"

[tool.poetry.scripts]
cyclonedx-py = "cyclonedx_py._internal.cli:run"

[tool.poetry.dependencies]
python = "^3.8"
cyclonedx-python-lib = { version = "^6.1.0", extras = ["validation"] }
packageurl-python = ">=0.11, <2"  # keep in sync with same dep in `cyclonedx-python-lib`
pip-requirements-parser = "^32.0"
packaging = "^22||^23"
tomli = { version = "^2.0.1", python = "<3.11" }
chardet = "^5.1"

[tool.poetry.group.dev.dependencies]
# pin to exact versions, if the tool/lib/plugin is process-relevant
coverage = "7.4.3"
ddt = "1.7.2"
flake8 = { version = "7.0.0", python = ">=3.8.1" }
flake8-annotations = { version = "3.0.1", python = ">=3.8.1" }
flake8-bugbear = { version = "24.2.6", python = ">=3.8.1" }
flake8-isort = "6.1.1"
flake8-quotes = "3.4.0"
flake8-use-fstring = "1.4"
pep8-naming = "0.13.3"
flake8-logging = "1.5.0"
isort = "5.13.2"
autopep8 = "2.0.4"
mypy = "1.9.0"
bandit = "1.7.8"
tox = "4.14.1"
# min version required to be able to install some dependencies
# see https://github.com/MichaelKim0407/flake8-use-fstring/issues/33
setuptools = ">= 47.0.0"
# install` needed for setup/init of testbeds for `environment` purpose
pip = ">=23.0"
pipenv = ">=2023.11.5"
poetry = "^1.7"
pdm = "^2.11"



[tool.semantic_release]
# see https://python-semantic-release.readthedocs.io/en/latest/configuration.html
commit_author = "semantic-release <semantic-release>"
commit_message = "chore(release): {version}\n\nAutomatically generated by python-semantic-release\n\nSigned-off-by: semantic-release <semantic-release>"
upload_to_vcs_release = true
build_command = "pip install poetry && poetry build"
version_toml = ["pyproject.toml:tool.poetry.version"]
version_variables = [
  "cyclonedx_py/__init__.py:__version__",
  "docs/conf.py:release",
]

[tool.semantic_release.publish]
dist_glob_patterns = ["dist/*"]
upload_to_vcs_release = true

[tool.semantic_release.changelog]
changelog_file = "CHANGELOG.md"
exclude_commit_patterns = [
  "chore\\(release\\):",
]

[tool.semantic_release.branches.main]
match = "(main|master)"
prerelease = false

[tool.semantic_release.branches."step"]
match = "(build|chore|ci|docs|feat|fix|perf|style|refactor|test)"
prerelease = true
prerelease_token = "alpha"

[tool.semantic_release.branches."major-dev"]
match = "(\\d+\\.0\\.0-(dev|rc)|dev/\\d+\\.0\\.0)"
prerelease = true
prerelease_token = "rc"
